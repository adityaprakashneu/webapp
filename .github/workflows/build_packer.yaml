name: Build Packer on Push

on:
  push:
    branches:
      - main

jobs:
  build-packer:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      DEFAULT_SUBNET: subnet-025f87a6da259c0bd
      ASG_NAME: web-asg
      LAUNCH_TEMPLATE_NAME: webapp-launch-template

    steps:
      - name: Echo Message
        run: echo "Pull request has been merged to the organization's repository."

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} # us-east-1

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Packer init
        run: |
          packer init ami.debian-packer-aws.pkr.hcl

      - name: Build Artifact
        run: |
          mkdir -p app
          zip -r app/webapp-main.zip . -x ".git*" -x ".github*"

      - name: Publish Web App Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: app/webapp-main.zip

      - name: check path
        run: |
          pwd
          ls /home/runner/work/webapp/webapp

      - name: Build AMI
        env:
          AWS_REGION: ${{ env.AWS_REGION }} # us-east-1
          SSH_USERNAME: admin
          SUBNET_ID: ${{ env.DEFAULT_SUBNET }} # subnet-025f87a6da259c0bd
        run: |
          packer build ami.debian-packer-aws.pkr.hcl

      - name: Get AMI ID
        id: get-ami
        run: |
          echo "AMI_ID=$(cat manifest.json | jq -r .builds[0].artifact_id | cut -d':' -f2)" >> $GITHUB_ENV
        shell: bash

      - name: Share AMI with DEMO account
        env:
          AWS_REGION: ${{ env.AWS_REGION }} # us-east-1
          DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
        run: |
          ami_id=${{ env.AMI_ID }}
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "{\"Add\":[{\"UserId\":\"$DEMO_ACCOUNT_ID\"}]}"

      ################ ASSIGNMENT 10 CHANGES #################
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ env.AWS_REGION }}
          OWNER_ID: ${{ secrets.AWS_OWNER_ID }}

      - name: Fetch Latest AMI ID from Private Images
        id: fetch_ami
        run: |
          LATEST_AMI_ID=$(aws ec2 describe-images --owners $OWNER_ID --filters "Name=is-public,Values=false" "Name=state,Values=available" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "Latest AMI ID: $LATEST_AMI_ID"
          echo "::set-output name=ami_id::$LATEST_AMI_ID"

      - name: Fetch Launch Template ID
        id: fetch_template
        run: |
          LATEST_AMI_ID=$(aws ec2 describe-images --owners $OWNER_ID --filters "Name=is-public,Values=false" "Name=state,Values=available" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text)
          
          if [ "$TEMPLATE_ID" == "None" ]; then
            echo "No Launch Template Available"
            exit 1
          fi

          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $TEMPLATE_ID --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
          aws ec2 create-launch-template-version --launch-template-id $TEMPLATE_ID --source-version $LATEST_VERSION --launch-template-data '{"ImageId":"'"$LATEST_AMI_ID"'"}'
          
          echo "Launch Template ID: $TEMPLATE_ID $LATEST_VERSION"
          echo "::set-output name=template_id::$TEMPLATE_ID"

      - name: Fetch ASG Name
        id: fetch_asg
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'web-asg')].AutoScalingGroupName | [0]" --output text)
          
          if [ "$ASG_NAME" == "None" ]; then
            echo "No Auto Scaling Group Available"
            exit 1
          fi

          echo "Fetched ASG Name: $ASG_NAME"
          echo "::set-output name=asg_name::$ASG_NAME"

      - name: Start Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ steps.fetch_asg.outputs.asg_name }} --query 'InstanceRefreshId' --output text)
          echo "Instance Refresh ID: $REFRESH_ID"
          echo "::set-output name=refresh_id::$REFRESH_ID"

      - name: Wait for Instance Refresh to Complete
        run: |
          STATUS="pending"

          while [ "$STATUS" != "Successful" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 100  # Wait for 100 seconds before the next check

            ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'web-asg')].AutoScalingGroupName | [0]" --output text)
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            
            echo "Current status: $STATUS"

            if [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            fi

          done

          echo "Instance refresh completed successfully"
