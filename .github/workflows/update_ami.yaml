name: Update AMI and Refresh Instances

on:
  push:
    branches:
      - main

jobs:
  update-ami-and-refresh:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ASG_NAME: asg

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ env.AWS_REGION }}
          OWNER_ID: ${{ secrets.AWS_OWNER_ID }}

      # - name: Fetch Latest AMI ID from Private Images
      #   id: fetch_ami
      #   run: |
      #     LATEST_AMI_ID=$(aws ec2 describe-images --owners $OWNER_ID --filters "Name=is-public,Values=false" "Name=state,Values=available" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
      #     echo "Latest AMI ID: $LATEST_AMI_ID"
      #     echo "::set-output name=ami_id::$LATEST_AMI_ID"

      # - name: Fetch Launch Template ID
      #   id: fetch_template
      #   run: |
      #     LATEST_AMI_ID=$(aws ec2 describe-images --owners $OWNER_ID --filters "Name=is-public,Values=false" "Name=state,Values=available" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
      #     TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text)
      #     LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $TEMPLATE_ID --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
      #     aws ec2 create-launch-template-version --launch-template-id $TEMPLATE_ID --source-version $LATEST_VERSION --launch-template-data '{"ImageId":"'"$LATEST_AMI_ID"'"}'
          
      #     if [ "$TEMPLATE_ID" == "None" ]; then
      #       echo "No Launch Template Available"
      #       exit 1
      #     fi
          
      #     echo "Launch Template ID: $TEMPLATE_ID $LATEST_VERSION"
      #     echo "::set-output name=template_id::$TEMPLATE_ID"

      # - name: Fetch ASG Name
      #   id: fetch_asg
      #   run: |
      #     ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'web-asg')].AutoScalingGroupName | [0]" --output text)
          
      #     if [ "$ASG_NAME" == "None" ]; then
      #       echo "No Auto Scaling Group Available"
      #       exit 1
      #     fi

      #     echo "Fetched ASG Name: $ASG_NAME"
      #     echo "::set-output name=asg_name::$ASG_NAME"

      # - name: Start Instance Refresh
      #   id: start_refresh
      #   run: |
      #     REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ steps.fetch_asg.outputs.asg_name }} --query 'InstanceRefreshId' --output text)
      #     echo "Instance Refresh ID: $REFRESH_ID"
      #     echo "::set-output name=refresh_id::$REFRESH_ID"

      # - name: Wait for Instance Refresh to Complete
      #   run: |
      #     STATUS="pending"

      #     while [ "$STATUS" != "Successful" ]; do
      #       echo "Waiting for instance refresh to complete..."
      #       sleep 100  # Wait for 100 seconds before the next check

      #       ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'web-asg')].AutoScalingGroupName | [0]" --output text)
      #       STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            
      #       echo "Current status: $STATUS"

      #       if [ "$STATUS" == "failed" ]; then
      #         echo "Instance refresh failed"
      #         exit 1
      #       fi

      #     done

      #     echo "Instance refresh completed successfully"
